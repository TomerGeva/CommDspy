import CommDspy as cdsp
import numpy as np

# ------------------------------------------------------------------------------------------------------------------
# GENERAL
# ------------------------------------------------------------------------------------------------------------------
CHUNK_SIZE      = 64
FS              = 53.125e9  # sampling frequency
CONSTELLATION   = cdsp.constants.ConstellationEnum.PAM4
LEVELS          = cdsp.get_levels(CONSTELLATION, full_scale=False)
BITS_PER_SYMBOL = np.log2(len(LEVELS))
# ------------------------------------------------------------------------------------------------------------------
# PRBS generator
# ------------------------------------------------------------------------------------------------------------------
PRBS_TYPE       = cdsp.constants.PrbsEnum.PRBS13
# ------------------------------------------------------------------------------------------------------------------
# Coding / Decoding - convolution
# ------------------------------------------------------------------------------------------------------------------
G               = {0:np.array([[1, 0],[0, 1]])}
FEEDBACK        = {0:np.array([1, 1])}
USE_FEEDBACK    = np.array([[0, 1]])
# ------------------------------------------------------------------------------------------------------------------
# Mapping
# ------------------------------------------------------------------------------------------------------------------
AMP_PP_MV       = 750   # transmission amplitude peak to peak in [mV]
RX_FACTOR       = 0.75  # factor for the slicer levels; highest level is rx_factor
# ------------------------------------------------------------------------------------------------------------------
# Channel
# ------------------------------------------------------------------------------------------------------------------
SNR             = 10     # [dB], AWGN at the moment
PULSE           = 'rcos' # raised cosine pulse
ROLLOFF         = 0.35   # pulse rolloff factor
PULSE_SPAN      = 8      # [UI], how long is the pulse
OSR             = 64     # over sampling rate
RJ_SIGMA        = 0      # [UI], random jitter std for the pulse shaping
CHANNEL_TYPE    = 'isi_awgn'
# ------------------------------------------------------------------------------------------------------------------
# CTLE
# ------------------------------------------------------------------------------------------------------------------
ZEROS     = [5e8, 11e9]
POLES     = [1e9, 20e9, 25e9]
DC_GAIN   = -10  # [dB]
# ------------------------------------------------------------------------------------------------------------------
# ADC
# ------------------------------------------------------------------------------------------------------------------
ADC_BITS    = 8
FRAC_BITS   = 6
QUANT_TYPE  = 'ss'
SAMPLE_RATE = 1  # samples per UI
# ------------------------------------------------------------------------------------------------------------------
# FFE DFE
# ------------------------------------------------------------------------------------------------------------------
FFE_PRECURSORS  = 4
FFE_POSTCURSORS = 27
DFE_TAPS        = 1
FFE_VEC = None
DFE_VEC = None
# FFE_VEC         = np.array([ 5.07514881e-02, -2.49866354e-01,  8.38558833e-01, -2.56477841e+00,
#                              6.01132793e+00, -1.36714831e+00, -1.23461720e+00,  5.13458332e-01,
#                              4.59859613e-02, -3.45056732e-02,  1.00430478e-01,  2.21703087e-02,
#                              1.22324600e-02,  4.83370272e-02, -3.74533635e-03,  3.10001097e-02,
#                              3.39484133e-02,  1.75975037e-02,  2.40305033e-02,  1.14154910e-02,
#                             -5.14113769e-02,  1.55452941e-01, -1.20958476e-01,  9.69672233e-02,
#                              4.67353341e-02, -7.95786424e-02,  4.61269177e-02, -6.89049422e-03,
#                              6.00878497e-02, -4.06378296e-02,  6.33841413e-02, -1.79156648e-02])
# FFE_VEC = FFE_VEC / 4
# DFE_VEC         = np.array([0.4147687]) / 4
SLICER_LEVELS   = LEVELS

class ControlVars:
    def __init__(self):
        self.simulation_verbose = False
